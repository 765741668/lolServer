<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd"
       default-autowire="byName">
    <!-- default-autowire="byName" >>>> 没有的话注解时找不到实例化的sessionFactory，
    而注入了一个空的,在hibernate检查的时候就报“ 'sessionFactory' or 'hibernateTemplate' is required” -->

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:env/db/db.properties"
                                  file-encoding="utf-8" ignore-unresolvable="true"/>
    <!-- c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${db.connection.driverClass}"/>
        <property name="jdbcUrl" value="${db.connection.url}"/>
        <property name="user" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}"/>
        <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"/>
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}"/>
        <property name="minPoolSize" value="${c3p0.minPoolSize}"/>
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}"/>
        <property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}"/>
        <property name="numHelperThreads" value="${c3p0.numHelperThreads}"/>

    </bean>
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:com/lol/fwk/mybatis/mapping/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lol.fwk.mybatis.dao" />
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置事务异常封装 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!--  配置事务传播特性 -->
    <!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
    <tx:annotation-driven />
    <tx:advice id="transAdvice" transaction-manager="transactionManager">
        <!-- 事务属性定义 -->
        <tx:attributes>
            <!--
                REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务，就加入到这个事务中。这是最常见的选择。
                SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
                MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常。
                REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
                NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
                NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
                NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与REQUIRED类似的操作。
            -->
            <tx:method name="get*"     propagation="REQUIRED"/>
            <tx:method name="find*"    propagation="REQUIRED"/>

            <tx:method name="set*"     propagation="SUPPORTS"/>
            <tx:method name="select*"  propagation="SUPPORTS"/>
            <tx:method name="load*"    propagation="SUPPORTS"/>
            <tx:method name="search*"  propagation="SUPPORTS"/>

            <tx:method name="add*"     propagation="REQUIRED"/>
            <tx:method name="update*"  propagation="REQUIRED"/>
            <tx:method name="del*"     propagation="REQUIRED"/>
            <tx:method name="disable*" propagation="REQUIRED"/>
            <tx:method name="save*"    propagation="REQUIRED"/>
            <tx:method name="insert*"  propagation="REQUIRED"/>
            <tx:method name="remove*"  propagation="REQUIRED"/>
            <tx:method name="delete*"  propagation="REQUIRED"/>
            <tx:method name="verify*"  propagation="REQUIRED"/>
            <tx:method name="modify*"  propagation="REQUIRED"/>

            <tx:method name="*" propagation="REQUIRED" rollback-for="com.lol.fwk.db.DAOException,
                        com.lol.fwk.db.ServiceException" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--  配置参与事务的类 -->
    <!--proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
        如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
        如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理
    -->
    <aop:config proxy-target-class="false">
        <!--
        （* com.evan.crm.service.*.*（..））中几个通配符的含义：
        |第一个 * —— 通配 随便率性返回值类型|
        |第二个 * —— 通配包com.evan.crm.service下的随便率性class|
        |第三个 * —— 通配包com.evan.crm.service下的随便率性class的随便率性办法|
        |第四个 .. —— 通配 办法可以有0个或多个参数|
         -->
        <!-- 通过aop定义事务增强切面 -->
        <!--<aop:pointcut expression=" execution(* com.lolfwkfwk.service..*(..))" id="serviceMethod" />-->
        <!-- 引用事务增强 把嵌套事物的public方法都工作于同一事务环境下，出现异常全回滚-->
        <!--<aop:advisor advice-ref="transAdvice" pointcut-ref="serviceMethod" />-->
        <aop:advisor advice-ref="transAdvice" pointcut="execution(* com.lol.fwk.service.*.impl..*.*(..))"/>
        <aop:advisor advice-ref="transAdvice" pointcut="execution(* com.lol.fwk.dao.*.impl..*.*(..))"/>
    </aop:config>
</beans>
