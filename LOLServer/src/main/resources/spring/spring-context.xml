<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:env/db.properties"
                                  file-encoding="utf-8" ignore-unresolvable="true"/>
    <!-- c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${db.connection.driverClass}"/>
        <property name="jdbcUrl" value="${db.connection.url}"/>
        <property name="user" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="testConnectionOnCheckin" value="${jdbc.c3p0.testConnectionOnCheckin}"/>
        <property name="testConnectionOnCheckout" value="${jdbc.c3p0.testConnectionOnCheckout}"/>
        <property name="idleConnectionTestPeriod" value="${jdbc.c3p0.idleConnectionTestPeriod}"/>
        <property name="initialPoolSize" value="${jdbc.c3p0.initialPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.c3p0.minPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.c3p0.maxPoolSize}"/>
        <property name="maxIdleTime" value="${jdbc.c3p0.maxIdleTime}"/>
        <property name="maxStatementsPerConnection" value="${jdbc.c3p0.maxStatementsPerConnection}"/>
        <property name="numHelperThreads" value="${jdbc.c3p0.numHelperThreads}"/>

    </bean>
    <!-- 应射解析 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.lol.dao.bean</value>
            </list>
        </property>
        <!--定义Hibernate的SessionFactory的属性 -->
        <property name="hibernateProperties">
            <props>
                <!-- 指定Hibernate的连接方言-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!-- 不同数据库连接，启动时选择create,update,create-drop   -->
                <!-- 自动修改，如果表结构与实体类不一致，那么就修改表使它们一致，数据会保留 -->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="connection.useUnicode">true</prop>
                <prop key="connection.characterEncoding">UTF-8</prop>
            </props>
        </property>
    </bean>


    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务异常封装 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!--  配置事务传播特性 -->
    <!-- 使用annotation定义数据库事务，这样可以在类或方法中直接使用@Transactional注解来声明事务 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
    <tx:annotation-driven/>
    <tx:advice id="transAdvice" transaction-manager="transactionManager">
        <!-- 事务属性定义 -->
        <tx:attributes>
            <!--SUPPORTS: 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务. -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="set*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="load*" propagation="SUPPORTS"/>
            <tx:method name="search*" propagation="SUPPORTS"/>
            <!--REQUIRED: 如果有事务,那么加入事务,没有的话新建一个(不写的情况下) -->
            <tx:method name="*" propagation="REQUIRED" rollback-for="com.lol.db.DAOException,
                        com.lol.db.ServiceException" isolation="DEFAULT"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="disable*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="verify*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--  配置参与事务的类 -->
    <aop:config proxy-target-class="true">
        <!--
        （* com.evan.crm.service.*.*（..））中几个通配符的含义：
        |第一个 * —— 通配 随便率性返回值类型|
        |第二个 * —— 通配包com.evan.crm.service下的随便率性class|
        |第三个 * —— 通配包com.evan.crm.service下的随便率性class的随便率性办法|
        |第四个 .. —— 通配 办法可以有0个或多个参数|
         -->
        <!-- 通过aop定义事务增强切面 -->
        <!--<aop:pointcut expression=" execution(* com.lol.service..*(..))" id="serviceMethod" />-->
        <!-- 引用事务增强 -->
        <!--<aop:advisor advice-ref="transAdvice" pointcut-ref="serviceMethod" />-->

        <aop:advisor advice-ref="transAdvice" pointcut="execution(* com.lol.service.impl..*.*(..))"/>
        <!--<aop:advisor advice-ref="transAdvice" pointcut="execution(* com.zds.core.service.sequence.impl..*.*(..))"/>-->
    </aop:config>
</beans>
